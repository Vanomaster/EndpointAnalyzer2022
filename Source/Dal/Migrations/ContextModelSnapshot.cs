// <auto-generated />
using System;
using Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dal.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Cyrillic_General_CS_AS")
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BenchmarksGpParametersRecommendationsRelation", b =>
                {
                    b.Property<Guid>("GpParametersRecommendationsBenchmarkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GpParametersRecommendationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GpParametersRecommendationsBenchmarkId", "GpParametersRecommendationId");

                    b.HasIndex("GpParametersRecommendationId");

                    b.ToTable("BenchmarksGpParametersRecommendationsRelation");
                });

            modelBuilder.Entity("BenchmarksTrustedHardwareRelation", b =>
                {
                    b.Property<Guid>("TrustedHardwareBenchmarkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrustedHardwareId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrustedHardwareBenchmarkId", "TrustedHardwareId");

                    b.HasIndex("TrustedHardwareId");

                    b.ToTable("BenchmarksTrustedHardwareRelation");
                });

            modelBuilder.Entity("BenchmarksTrustedSoftwareRelation", b =>
                {
                    b.Property<Guid>("TrustedSoftwareBenchmarkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrustedSoftwareId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TrustedSoftwareBenchmarkId", "TrustedSoftwareId");

                    b.HasIndex("TrustedSoftwareId");

                    b.ToTable("BenchmarksTrustedSoftwareRelation");
                });

            modelBuilder.Entity("Dal.Entities.Benchmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GpParametersRecommendationsBenchmarkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("TrustedHardwareBenchmarkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TrustedSoftwareBenchmarkId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GpParametersRecommendationsBenchmarkId");

                    b.HasIndex("TrustedHardwareBenchmarkId");

                    b.HasIndex("TrustedSoftwareBenchmarkId");

                    b.HasIndex(new[] { "Name" }, "AK_Benchmarks_Name")
                        .IsUnique();

                    b.ToTable("Benchmarks");
                });

            modelBuilder.Entity("Dal.Entities.GpParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "AK_GpParameters_Name")
                        .IsUnique();

                    b.ToTable("GpParameters");
                });

            modelBuilder.Entity("Dal.Entities.GpParameterRegistryParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("GpParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("GpParameterId");

                    b.HasIndex(new[] { "KeyName", "ParameterName" }, "AK_GpParameterRegistryParameters_KeyName_ParameterName")
                        .IsUnique();

                    b.ToTable("GpParameterRegistryParameters");
                });

            modelBuilder.Entity("Dal.Entities.GpParametersRecommendation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("Direction")
                        .HasColumnType("bit");

                    b.Property<Guid>("GpParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Impact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rationale")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("GpParameterId");

                    b.ToTable("GpParametersRecommendations");
                });

            modelBuilder.Entity("Dal.Entities.GpParametersRecommendationsBenchmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "AK_GpParametersRecommendationsBenchmarks_Name")
                        .IsUnique();

                    b.ToTable("GpParametersRecommendationsBenchmarks");
                });

            modelBuilder.Entity("Dal.Entities.TrustedHardware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("HardwareId")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HardwareId" }, "AK_TrustedHardware_HardwareId")
                        .IsUnique();

                    b.ToTable("TrustedHardware", (string)null);
                });

            modelBuilder.Entity("Dal.Entities.TrustedHardwareBenchmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "AK_TrustedHardwareBenchmarks_Name")
                        .IsUnique();

                    b.ToTable("TrustedHardwareBenchmarks");
                });

            modelBuilder.Entity("Dal.Entities.TrustedSoftware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "Version" }, "AK_TrustedSoftware_Name_Version")
                        .IsUnique();

                    b.ToTable("TrustedSoftware", (string)null);
                });

            modelBuilder.Entity("Dal.Entities.TrustedSoftwareBenchmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "AK_TrustedSoftwareBenchmarks_Name")
                        .IsUnique();

                    b.ToTable("TrustedSoftwareBenchmarks");
                });

            modelBuilder.Entity("BenchmarksGpParametersRecommendationsRelation", b =>
                {
                    b.HasOne("Dal.Entities.GpParametersRecommendation", null)
                        .WithMany()
                        .HasForeignKey("GpParametersRecommendationId")
                        .IsRequired()
                        .HasConstraintName("FK_BenchmarksGpParametersRecommendationsRelations_GpParametersRecommendations");

                    b.HasOne("Dal.Entities.GpParametersRecommendationsBenchmark", null)
                        .WithMany()
                        .HasForeignKey("GpParametersRecommendationsBenchmarkId")
                        .IsRequired()
                        .HasConstraintName("FK_BenchmarksGpParametersRecommendationsRelations_GpParametersRecommendationsBenchmarks");
                });

            modelBuilder.Entity("BenchmarksTrustedHardwareRelation", b =>
                {
                    b.HasOne("Dal.Entities.TrustedHardwareBenchmark", null)
                        .WithMany()
                        .HasForeignKey("TrustedHardwareBenchmarkId")
                        .IsRequired()
                        .HasConstraintName("FK_BenchmarksTrustedHardwareRelations_TrustedHardwareBenchmarks");

                    b.HasOne("Dal.Entities.TrustedHardware", null)
                        .WithMany()
                        .HasForeignKey("TrustedHardwareId")
                        .IsRequired()
                        .HasConstraintName("FK_BenchmarksTrustedHardwareRelations_TrustedHardware");
                });

            modelBuilder.Entity("BenchmarksTrustedSoftwareRelation", b =>
                {
                    b.HasOne("Dal.Entities.TrustedSoftwareBenchmark", null)
                        .WithMany()
                        .HasForeignKey("TrustedSoftwareBenchmarkId")
                        .IsRequired()
                        .HasConstraintName("FK_BenchmarksTrustedSoftwareRelations_TrustedSoftwareBenchmarks");

                    b.HasOne("Dal.Entities.TrustedSoftware", null)
                        .WithMany()
                        .HasForeignKey("TrustedSoftwareId")
                        .IsRequired()
                        .HasConstraintName("FK_BenchmarksTrustedSoftwareRelations_TrustedSoftware");
                });

            modelBuilder.Entity("Dal.Entities.Benchmark", b =>
                {
                    b.HasOne("Dal.Entities.GpParametersRecommendationsBenchmark", "GpParametersRecommendationsBenchmark")
                        .WithMany("Benchmarks")
                        .HasForeignKey("GpParametersRecommendationsBenchmarkId")
                        .HasConstraintName("FK_Benchmarks_GpParametersRecommendationsBenchmarks");

                    b.HasOne("Dal.Entities.TrustedHardwareBenchmark", "TrustedHardwareBenchmark")
                        .WithMany("Benchmarks")
                        .HasForeignKey("TrustedHardwareBenchmarkId")
                        .HasConstraintName("FK_Benchmarks_TrustedHardwareBenchmarks");

                    b.HasOne("Dal.Entities.TrustedSoftwareBenchmark", "TrustedSoftwareBenchmark")
                        .WithMany("Benchmarks")
                        .HasForeignKey("TrustedSoftwareBenchmarkId")
                        .HasConstraintName("FK_Benchmarks_TrustedSoftwareBenchmarks");

                    b.Navigation("GpParametersRecommendationsBenchmark");

                    b.Navigation("TrustedHardwareBenchmark");

                    b.Navigation("TrustedSoftwareBenchmark");
                });

            modelBuilder.Entity("Dal.Entities.GpParameterRegistryParameter", b =>
                {
                    b.HasOne("Dal.Entities.GpParameter", "GpParameter")
                        .WithMany("GpParameterRegistryParameters")
                        .HasForeignKey("GpParameterId")
                        .IsRequired()
                        .HasConstraintName("FK_GpParameterRegistryParameters_GpParameters");

                    b.Navigation("GpParameter");
                });

            modelBuilder.Entity("Dal.Entities.GpParametersRecommendation", b =>
                {
                    b.HasOne("Dal.Entities.GpParameter", "GpParameter")
                        .WithMany("GpParametersRecommendations")
                        .HasForeignKey("GpParameterId")
                        .IsRequired()
                        .HasConstraintName("FK_GpParametersRecommendations_GpParameters");

                    b.Navigation("GpParameter");
                });

            modelBuilder.Entity("Dal.Entities.GpParameter", b =>
                {
                    b.Navigation("GpParameterRegistryParameters");

                    b.Navigation("GpParametersRecommendations");
                });

            modelBuilder.Entity("Dal.Entities.GpParametersRecommendationsBenchmark", b =>
                {
                    b.Navigation("Benchmarks");
                });

            modelBuilder.Entity("Dal.Entities.TrustedHardwareBenchmark", b =>
                {
                    b.Navigation("Benchmarks");
                });

            modelBuilder.Entity("Dal.Entities.TrustedSoftwareBenchmark", b =>
                {
                    b.Navigation("Benchmarks");
                });
#pragma warning restore 612, 618
        }
    }
}
